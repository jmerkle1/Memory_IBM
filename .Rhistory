vertTransmission=0) #0 if false, 1 if true, vertical transmission of interactions
# load up results files
result.folder="C:/Users/jmerkle/Desktop/results"
load(paste0(result.folder,"/interaction_matricies.RData"))
load(paste0(result.folder,"/population_data.RData"))  #don't really need this if ind data is written out
load(paste0(result.folder,"/individual_data.RData"))
results <- read.csv(paste0(result.folder,"/population_stats.csv"))
head(results)
#plot of one yrs interactions
interactGraph <- graph_from_incidence_matrix(interactions[[2]], multiple = FALSE, mode="all", weighted = TRUE)
plot(interactGraph, vertex.size=10, vertex.label=NA)
plot(results$t, results$pop.size)
par(mfrow=c(3,2))
plot(results$t, results$pop.size, type="b")
plot(results$t, results$births, type="b")
plot(results$t, results$deaths, type="b")
plot(results$t, results$med.age, type="b")
plot(results$t, results$frac.informed, type="l")
lines(results$t, results$frac.informed)
par(mfrow=c(3,2))
plot(results$t, results$pop.size, type="b")
plot(results$t, results$births, type="b")
plot(results$t, results$deaths, type="b")
plot(results$t, results$med.age, type="b")
plot(results$t, results$frac.informed, type="l")
lines(results$t, 1-results$frac.informed)
par(mfrow=c(3,2))
plot(results$t, results$pop.size, type="b")
plot(results$t, results$births, type="b")
plot(results$t, results$deaths, type="b")
plot(results$t, results$med.age, type="b")
plot(results$t, results$frac.informed, type="l", ylim=c(0,1))
lines(results$t, 1-results$frac.informed)
par(mfrow=c(3,2), mai=c(.4,.4,.1,.1))
plot(results$t, results$pop.size, type="b")
plot(results$t, results$births, type="b")
plot(results$t, results$deaths, type="b")
plot(results$t, results$med.age, type="b")
plot(results$t, results$frac.informed, type="l", ylim=c(0,1))
lines(results$t, 1-results$frac.informed)
par(mfrow=c(3,2), mai=c(.4,.4,.1,.1), mgp=c(1,.4,0))
plot(results$t, results$pop.size, type="b")
plot(results$t, results$births, type="b")
plot(results$t, results$deaths, type="b")
plot(results$t, results$med.age, type="b")
plot(results$t, results$frac.informed, type="l", ylim=c(0,1))
lines(results$t, 1-results$frac.informed)
par(mfrow=c(3,2), mai=c(.4,.4,.1,.1), mgp=c(1,.4,0),
tck=-0.01)
plot(results$t, results$pop.size, type="b")
plot(results$t, results$births, type="b")
plot(results$t, results$deaths, type="b")
plot(results$t, results$med.age, type="b")
plot(results$t, results$frac.informed, type="l", ylim=c(0,1))
lines(results$t, 1-results$frac.informed)
par(mfrow=c(3,2), mai=c(.4,.4,.1,.1), mgp=c(1,.2,0),
tck=-0.02)
plot(results$t, results$pop.size, type="b")
plot(results$t, results$births, type="b")
plot(results$t, results$deaths, type="b")
plot(results$t, results$med.age, type="b")
plot(results$t, results$frac.informed, type="l", ylim=c(0,1))
lines(results$t, 1-results$frac.informed)
par(mfrow=c(3,2), mai=c(.4,.4,.1,.1), mgp=c(1,.2,0),
tck=-0.02)
plot(results$t, results$pop.size, type="b",ylab="N", xlab="Time step")
plot(results$t, results$births, type="b",ylab="N", xlab="Time step")
plot(results$t, results$deaths, type="b",ylab="N", xlab="Time step")
plot(results$t, results$med.age, type="b",ylab="N", xlab="Time step")
plot(results$t, results$frac.informed, type="l",
ylim=c(0,1),ylab="N", xlab="Time step")
lines(results$t, 1-results$frac.informed)
par(mfrow=c(3,2), mai=c(.4,.4,.1,.1), mgp=c(1,.2,0),
tck=-0.02, cex.axis=.7)
plot(results$t, results$pop.size, type="b",ylab="N", xlab="Time step")
plot(results$t, results$births, type="b",ylab="N", xlab="Time step")
plot(results$t, results$deaths, type="b",ylab="N", xlab="Time step")
plot(results$t, results$med.age, type="b",ylab="N", xlab="Time step")
plot(results$t, results$frac.informed, type="l",
ylim=c(0,1),ylab="N", xlab="Time step")
lines(results$t, 1-results$frac.informed)
par(mfrow=c(3,2), mai=c(.4,.4,.1,.1), mgp=c(1,.2,0),
tck=-0.02, cex.axis=.8)
plot(results$t, results$pop.size, type="b",ylab="N", xlab="Time step")
plot(results$t, results$births, type="b",ylab="N", xlab="Time step")
plot(results$t, results$deaths, type="b",ylab="N", xlab="Time step")
plot(results$t, results$med.age, type="b",ylab="N", xlab="Time step")
plot(results$t, results$frac.informed, type="l",
ylim=c(0,1),ylab="N", xlab="Time step")
lines(results$t, 1-results$frac.informed)
par(mfrow=c(3,2), mai=c(.4,.4,.1,.1), mgp=c(1,.1,0),
tck=-0.02, cex.axis=.8)
plot(results$t, results$pop.size, type="b",ylab="N", xlab="Time step")
plot(results$t, results$births, type="b",ylab="N", xlab="Time step")
plot(results$t, results$deaths, type="b",ylab="N", xlab="Time step")
plot(results$t, results$med.age, type="b",ylab="N", xlab="Time step")
plot(results$t, results$frac.informed, type="l",
ylim=c(0,1),ylab="N", xlab="Time step")
lines(results$t, 1-results$frac.informed)
par(mfrow=c(3,2), mai=c(.4,.4,.1,.01), mgp=c(1,.1,0),
tck=-0.02, cex.axis=.8)
plot(results$t, results$pop.size, type="b",ylab="N", xlab="Time step")
plot(results$t, results$births, type="b",ylab="N", xlab="Time step")
plot(results$t, results$deaths, type="b",ylab="N", xlab="Time step")
plot(results$t, results$med.age, type="b",ylab="N", xlab="Time step")
plot(results$t, results$frac.informed, type="l",
ylim=c(0,1),ylab="N", xlab="Time step")
lines(results$t, 1-results$frac.informed)
par(mfrow=c(3,2), mai=c(.4,.4,.01,.01), mgp=c(1,.1,0),
tck=-0.02, cex.axis=.8)
plot(results$t, results$pop.size, type="b",ylab="N", xlab="Time step")
plot(results$t, results$births, type="b",ylab="N", xlab="Time step")
plot(results$t, results$deaths, type="b",ylab="N", xlab="Time step")
plot(results$t, results$med.age, type="b",ylab="N", xlab="Time step")
plot(results$t, results$frac.informed, type="l",
ylim=c(0,1),ylab="N", xlab="Time step")
lines(results$t, 1-results$frac.informed)
par(mfrow=c(3,2), mai=c(.4,.3,.03,.03), mgp=c(1,.1,0),
tck=-0.02, cex.axis=.8)
plot(results$t, results$pop.size, type="b",ylab="N", xlab="Time step")
plot(results$t, results$births, type="b",ylab="N", xlab="Time step")
plot(results$t, results$deaths, type="b",ylab="N", xlab="Time step")
plot(results$t, results$med.age, type="b",ylab="N", xlab="Time step")
plot(results$t, results$frac.informed, type="l",
ylim=c(0,1),ylab="N", xlab="Time step")
lines(results$t, 1-results$frac.informed)
par(mfrow=c(3,2), mai=c(.3,.3,.03,.03), mgp=c(1,.1,0),
tck=-0.02, cex.axis=.8)
plot(results$t, results$pop.size, type="b",ylab="N", xlab="Time step")
plot(results$t, results$births, type="b",ylab="N", xlab="Time step")
plot(results$t, results$deaths, type="b",ylab="N", xlab="Time step")
plot(results$t, results$med.age, type="b",ylab="N", xlab="Time step")
plot(results$t, results$frac.informed, type="l",
ylim=c(0,1),ylab="N", xlab="Time step")
lines(results$t, 1-results$frac.informed)
par(mfrow=c(3,2), mai=c(.3,.3,.03,.03), mgp=c(1,.1,0),
tck=-0.02, cex.axis=.8)
plot(results$t, results$pop.size, type="b",ylab="N", xlab="Time step")
plot(results$t, results$births, type="b",ylab="Births", xlab="Time step")
plot(results$t, results$deaths, type="b",ylab="Deaths", xlab="Time step")
plot(results$t, results$med.age, type="b",ylab="Median age", xlab="Time step")
plot(results$t, results$frac.informed, type="l",
ylim=c(0,1),ylab="Proportion", xlab="Time step")
lines(results$t, 1-results$frac.informed, col="grey")
legend("right", c("Informed","Uninformed"), lty=1, col=c("black","grey"))
par(mfrow=c(3,2), mai=c(.3,.3,.03,.03), mgp=c(1,.1,0),
tck=-0.02, cex.axis=.8)
plot(results$t, results$pop.size, type="b",ylab="N", xlab="Time step")
plot(results$t, results$births, type="b",ylab="Births", xlab="Time step")
plot(results$t, results$deaths, type="b",ylab="Deaths", xlab="Time step")
plot(results$t, results$med.age, type="b",ylab="Median age", xlab="Time step")
plot(results$t, results$frac.informed, type="l",
ylim=c(0,1),ylab="Proportion", xlab="Time step")
lines(results$t, 1-results$frac.informed, col="grey")
legend("right", c("Informed","Uninformed"), lty=1, col=c("black","grey"), inset=0.02)
par(mfrow=c(3,2), mai=c(.3,.3,.03,.03), mgp=c(1,.1,0),
tck=-0.02, cex.axis=.8)
plot(results$t, results$pop.size, type="b",ylab="N", xlab="Time step")
plot(results$t, results$births, type="b",ylab="Births", xlab="Time step")
plot(results$t, results$deaths, type="b",ylab="Deaths", xlab="Time step")
plot(results$t, results$med.age, type="b",ylab="Median age", xlab="Time step")
plot(results$t, results$frac.informed, type="l",
ylim=c(0,1),ylab="Proportion", xlab="Time step", lwd=3)
lines(results$t, 1-results$frac.informed, col="grey",lwd=3)
legend("right", c("Informed","Uninformed"), lty=1, col=c("black","grey"), inset=0.02)
par(mfrow=c(3,2), mai=c(.3,.3,.03,.03), mgp=c(1,.1,0),
tck=-0.02, cex.axis=.8)
plot(results$t, results$pop.size, type="b",ylab="N", xlab="Time step", lwd=3)
plot(results$t, results$births, type="b",ylab="Births", xlab="Time step", lwd=3)
plot(results$t, results$deaths, type="b",ylab="Deaths", xlab="Time step", lwd=3)
plot(results$t, results$med.age, type="b",ylab="Median age", xlab="Time step", lwd=3)
plot(results$t, results$frac.informed, type="l",
ylim=c(0,1),ylab="Proportion", xlab="Time step", lwd=3)
lines(results$t, 1-results$frac.informed, col="grey",lwd=3)
legend("right", c("Informed","Uninformed"), lty=1, col=c("black","grey"), inset=0.02)
par(mfrow=c(3,2), mai=c(.3,.3,.03,.03), mgp=c(1,.1,0),
tck=-0.02, cex.axis=.8)
plot(results$t, results$pop.size, type="l",ylab="N", xlab="Time step", lwd=3)
plot(results$t, results$births, type="l",ylab="Births", xlab="Time step", lwd=3)
plot(results$t, results$deaths, type="l",ylab="Deaths", xlab="Time step", lwd=3)
plot(results$t, results$med.age, type="l",ylab="Median age", xlab="Time step", lwd=3)
plot(results$t, results$frac.informed, type="l",
ylim=c(0,1),ylab="Proportion", xlab="Time step", lwd=3)
lines(results$t, 1-results$frac.informed, col="grey",lwd=3)
legend("right", c("Informed","Uninformed"), lty=1, col=c("black","grey"), inset=0.02)
png(paste0(result.folder,"/summary_stats.png"), width=4, height=6, units="in", res=400)
par(mfrow=c(3,2), mai=c(.3,.3,.03,.03), mgp=c(1,.1,0),
tck=-0.02, cex.axis=.8)
plot(results$t, results$pop.size, type="l",ylab="N", xlab="Time step", lwd=3)
plot(results$t, results$births, type="l",ylab="Births", xlab="Time step", lwd=3)
plot(results$t, results$deaths, type="l",ylab="Deaths", xlab="Time step", lwd=3)
plot(results$t, results$med.age, type="l",ylab="Median age", xlab="Time step", lwd=3)
plot(results$t, results$frac.informed, type="l",
ylim=c(0,1),ylab="Proportion", xlab="Time step", lwd=3)
lines(results$t, 1-results$frac.informed, col="grey",lwd=3)
legend("right", c("Informed","Uninformed"), lty=1, col=c("black","grey"), inset=0.02)
dev.off()
str(interactions[[1]])
rowSums(interactions[[2]])
#histogram of number of individuals with a number of interactions, interactions are binned in intervals of 5
sumIndInteracts <- rowSums(interactions[[2]])
hist(sumIndInteracts)
#plot of one yrs interactions
interactGraph <- graph_from_incidence_matrix(interactions[[2]], multiple = FALSE, mode="all", weighted = TRUE)
plot(interactGraph, vertex.size=10, vertex.label=NA)
as.matrix(interactions[[2]])
#source the functions you will need
source("C:/Users/jmerkle/Documents/GitHub/Memory_IBM/info.transfer.IBM.R")
info.transfer.IBM(h=0.10, #increase in probability of death for uninformed
nl=0.01, # naive learning probability of the oldest animals (i.e., the ones that have the highest naive learning)
si=5, # maximum mean (i.e., lambda of poison distribution) number of interactions per pair (if animal has 1 bold, it interacts with an animal with 1 boldness, and population is at or above K, this is the lambda of the interaction distributions)
infotransfer=0.6, # given an interaction, what is the probability that information is transfered (min=0, max=1)
K=100, # carrying capacity
N0=50, # starting number of individuals
t=10, # time of simulation
sex.ratio=0.5, #what is the sex ratio of of the population/births?
age.distr.lamba=5, # lambda value for starting age distribution based on poison distribution
informed.distr.beta=c(.5, 1), # probability of knowing information, beta distribution ranges from 0 to 1 (vector of 2 values: shape1 and shape2)
bold.distr.beta=c(2, 2), # probability of being bold, beta distribution (vector of 2 values: shape1 and shape2)
birthdeath.file="C:/Users/jmerkle/Documents/GitHub/Memory_IBM/ageClass_Test.csv", #dataframe of age based birth and death rate. The columns should be age, ageClass, birthRate, and survivalRate, in that order.
result.folder="C:/Users/jmerkle/Desktop/results", #an empty folder where results will be saved.
set_seed=FALSE, # want to make results reproducible? Then set as TRUE
save_at_each_iter=TRUE, #should all results be written to file at each time step?
vertTransmission=0) #0 if false, 1 if true, vertical transmission of info status
# load up results files
result.folder="C:/Users/jmerkle/Desktop/results"
load(paste0(result.folder,"/interaction_matricies.RData"))
load(paste0(result.folder,"/population_data.RData"))  #don't really need this if ind data is written out
load(paste0(result.folder,"/individual_data.RData"))
results <- read.csv(paste0(result.folder,"/population_stats.csv"))
head(results)
# png(paste0(result.folder,"/summary_stats.png"), width=4, height=6, units="in", res=400)
par(mfrow=c(3,2), mai=c(.3,.3,.03,.03), mgp=c(1,.1,0),
tck=-0.02, cex.axis=.8)
plot(results$t, results$pop.size, type="l",ylab="N", xlab="Time step", lwd=3)
plot(results$t, results$births, type="l",ylab="Births", xlab="Time step", lwd=3)
plot(results$t, results$deaths, type="l",ylab="Deaths", xlab="Time step", lwd=3)
plot(results$t, results$med.age, type="l",ylab="Median age", xlab="Time step", lwd=3)
plot(results$t, results$frac.informed, type="l",
ylim=c(0,1),ylab="Proportion", xlab="Time step", lwd=3)
lines(results$t, 1-results$frac.informed, col="grey",lwd=3)
legend("right", c("Informed","Uninformed"), lty=1, col=c("black","grey"), inset=0.02)
#plot of one yrs interactions
interactGraph <- graph_from_incidence_matrix(interactions[[2]], multiple = FALSE, mode="all", weighted = TRUE)
plot(interactGraph, vertex.size=10, vertex.label=NA)
dev.off()
summary(interactGraph)
head(interactions[[2]])
plot(interactGraph, vertex.size=10, vertex.label=NA)
#plot of one yrs interactions
interactGraph <- graph_from_incidence_matrix(interactions[[2]], multiple = FALSE, directed=FALSE, weighted = TRUE)
summary(interactGraph)
plot(interactGraph, vertex.size=10, vertex.label=NA)
E(interactGraph)$width
E(interactGraph)$weight
dim(interactions[[2]]\)
dim(interactions[[2]]\)
dim(interactions[[2]])
head(as.matrix(interactions[[2]]))
V(interactGraph)
V(interactGraph)$weight
50*50
E(interactGraph)
length(E(interactGraph)$weight)
hist(E(interactGraph)$weight)
E(interactGraph)
V(interactGraph)$name
V(interactGraph)
tmp <- as.matrix(interactions[[2]])
View(tmp)
matrix(sample(0:1, 15, repl=TRUE), 3, 5)
inc <- matrix(sample(0:1, 15, repl=TRUE), 3, 5)
colnames(inc) <- letters[1:5]
rownames(inc) <- LETTERS[1:3]
graph_from_incidence_matrix(inc)
V(graph_from_incidence_matrix(inc))
#plot of one yrs interactions
interactGraph <- graph_from_data_frame(interactions[[2]], diag = FALSE, mode="undirected", weighted = TRUE)
#plot of one yrs interactions
interactGraph <- graph_from_adjacency_matrix(interactions[[2]], diag = FALSE, mode="undirected", weighted = TRUE)
summary(interactGraph)
plot(interactGraph, vertex.size=10, vertex.label=NA)
length(E(interactGraph)$weight)   #this is the number of edges
hist(E(interactGraph)$weight)    #this is the distribution of interactions or weights among the number of edges
E(interactGraph)   # Here are the edges
V(interactGraph)
plot(interactGraph, vertex.size=10, vertex.label=NA)
length(E(interactGraph)$weight)   #this is the number of edges
hist(E(interactGraph)$weight)    #this is the distribution of interactions or weights among the number of edges
E(interactGraph)   # Here are the edges
length(V(interactGraph)) # this is the number of vertices or individuals in teh graph
#histogram of number of individuals with a number of interactions, interactions are binned in intervals of 5
sumIndInteracts <- rowSums(interactions[[2]])
hist(sumIndInteracts)
plot(interactGraph, vertex.size=10, vertex.label=NA)
lo <- layout_nicely(interactGraph)
plot(interactGraph, layout=lo)
plot(interactGraph, layout=lo, vertex.label.cex=.6, edge.curved=.1)
lo <- layout_nicely(interactGraph, dim=3)
plot(interactGraph, layout=lo, vertex.label.cex=.6, edge.curved=.1)
lo <- layout_with_dh(interactGraph)
plot(interactGraph, layout=lo, vertex.label.cex=.6, edge.curved=.1)
lo <- layout_with_fr(interactGraph)
plot(interactGraph, layout=lo, vertex.label.cex=.6, edge.curved=.1)
lo <- layout_with_gem(interactGraph)
plot(interactGraph, layout=lo, vertex.label.cex=.6, edge.curved=.1)
lo <- layout_nicely(interactGraph)
plot(interactGraph, layout=lo, vertex.label.cex=.6, edge.curved=.1)
plot(interactGraph, layout=lo, vertex.label.cex=.6, edge.curved=.1, mai=c(.1,.1,.1,.1))
lo <- layout_nicely(interactGraph)
par(mai=c(.1,.1,.1,.1))
plot(interactGraph, layout=lo, vertex.label.cex=.6, edge.curved=.1)
plot(interactGraph, layout=lo, vertex.label.cex=.6, vertex.size=10, edge.curved=.1)
E(interactGraph)$width <- E(interactGraph)$weight
plot(g, main=paste("Annual:",yrs[i]),vertex.label.cex=.6, vertex.label.color="black",
edge.curved=.1, layout=lo)
plot(interactGraph, layout=lo, vertex.label.cex=.6, vertex.size=10, edge.curved=.1)
#plotting
E(interactGraph)$width <- E(interactGraph)$weight
lo <- layout_nicely(interactGraph)
par(mai=c(.1,.1,.1,.1))
plot(interactGraph, layout=lo, vertex.label.cex=.6, vertex.size=10, edge.curved=.1)
#plotting
E(interactGraph)$width <- E(interactGraph)$weight*2
lo <- layout_nicely(interactGraph)
par(mai=c(.1,.1,.1,.1))
plot(interactGraph, layout=lo, vertex.label.cex=.6, vertex.size=10, edge.curved=.1)
plot(interactGraph, layout=lo, vertex.label.cex=.6, vertex.size=10, edge.curved=.3)
edge_density(interactGraph) #The proportion of present edges from all possible edges in the network.
mean_distance(interactGraph)
diameter(interactGraph, directed=F, weights=E(interactGraph)$weight)
diameter(interactGraph, directed=F, weights=NULL)
mean_distance(interactGraph)
degree(interactGraph)
betweenness(interactGraph)    #the number of geodesics (shortest paths) going through a vertex or an edge.
mean(betweenness(interactGraph))    #the number of geodesics (shortest paths) going through a vertex or an edge.
eigen_centrality(interactGraph, weights=E(interactGraph)$weight)$value
eigen_centrality(interactGraph, weights=E(interactGraph)$weight)$value    # mean centrality proportional to the sum of connection centralities
hub.score(interactGraph)$vector   #hub or authority score
hub.score(interactGraph)$value   #hub or authority score
hub.score(interactGraph, weights=E(interactGraph)$weight)$value   #hub or authority score
transitivity(interactGraph)
transitivity(interactGraph, type="global")
transitivity(interactGraph, type="global", weights=E(interactGraph)$weight)
results
length(interactions)
# add network matricies to results table
results.graph <- do.call(rbind, lapply(1:length(interactions), function(i){
tmp <- interactions[[i]]
g <- graph_from_adjacency_matrix(tmp, diag = FALSE, mode="undirected", weighted = TRUE)
return(data.frame(t=i-1,edge_density=edge_density(g), #The proportion of present edges from all possible edges in the network.
diameter=diameter(g, directed=F, weights=NULL),   #  length of the longest geodesic (or longest distance)
mean_distance=mean_distance(g),            # mean length of geodesics
degree=degree(g),
betweenness=mean(betweenness(g)),    #the mean number of geodesics (shortest paths) going through a vertex or an edge.
eigen_centrality=eigen_centrality(g, weights=E(g)$weight)$value,    # mean centrality proportional to the sum of connection centralities
authority=hub.score(g, weights=E(g)$weight)$value,   #hub or authority score
transitivity=transitivity(g, type="global", weights=E(g)$weight)))   #probability that the adjacent vertices of a vertex are connected. This is sometimes also called the clustering coefficient.
}))
head(results.graph)
1:length(interactions)
results.graph
i=1
edge_density(g)
tmp <- interactions[[i]]
g <- graph_from_adjacency_matrix(tmp, diag = FALSE, mode="undirected", weighted = TRUE)
edge_density(g)
tmp
# add network matricies to results table
results.graph <- do.call(rbind, lapply(2:length(interactions), function(i){
tmp <- interactions[[i]]
g <- graph_from_adjacency_matrix(tmp, diag = FALSE, mode="undirected", weighted = TRUE)
return(data.frame(t=i-1,edge_density=edge_density(g), #The proportion of present edges from all possible edges in the network.
diameter=diameter(g, directed=F, weights=NULL),   #  length of the longest geodesic (or longest distance)
mean_distance=mean_distance(g),            # mean length of geodesics
degree=degree(g),
betweenness=mean(betweenness(g)),    #the mean number of geodesics (shortest paths) going through a vertex or an edge.
eigen_centrality=eigen_centrality(g, weights=E(g)$weight)$value,    # mean centrality proportional to the sum of connection centralities
authority=hub.score(g, weights=E(g)$weight)$value,   #hub or authority score
transitivity=transitivity(g, type="global", weights=E(g)$weight)))   #probability that the adjacent vertices of a vertex are connected. This is sometimes also called the clustering coefficient.
}))
head(results.graph)
i=1
i=2
tmp <- interactions[[i]]
g <- graph_from_adjacency_matrix(tmp, diag = FALSE, mode="undirected", weighted = TRUE)
edge_density(g)
diameter(g, directed=F, weights=NULL)
mean_distance(g)
degree(g)
mean(betweenness(g))
eigen_centrality(g, weights=E(g)$weight)$value
hub.score(g, weights=E(g)$weight)$value
transitivity(g, type="global", weights=E(g)$weight)
V(g)
# add network matricies to results table
results.graph <- do.call(rbind, lapply(2:length(interactions), function(i){
tmp <- interactions[[i]]
g <- graph_from_adjacency_matrix(tmp, diag = FALSE, mode="undirected", weighted = TRUE)
return(data.frame(t=i-1, no_ids=length(V(g)),
edge_density=edge_density(g), #The proportion of present edges from all possible edges in the network.
diameter=diameter(g, directed=F, weights=NULL),   #  length of the longest geodesic (or longest distance)
mean_distance=mean_distance(g),            # mean length of geodesics
degree=mean(degree(g)),
betweenness=mean(betweenness(g)),    #the mean number of geodesics (shortest paths) going through a vertex or an edge.
eigen_centrality=eigen_centrality(g, weights=E(g)$weight)$value,    # mean centrality proportional to the sum of connection centralities
authority=hub.score(g, weights=E(g)$weight)$value,   #hub or authority score
transitivity=transitivity(g, type="global", weights=E(g)$weight)))   #probability that the adjacent vertices of a vertex are connected. This is sometimes also called the clustering coefficient.
}))
head(results.graph)
# png(paste0(result.folder,"/summary_stats.png"), width=4, height=6, units="in", res=400)
par(mfrow=c(4,4), mai=c(.3,.3,.03,.03), mgp=c(1,.1,0),
tck=-0.02, cex.axis=.8)
# png(paste0(result.folder,"/summary_graph_stats.png"), width=6, height=6, units="in", res=400)
par(mfrow=c(4,4), mai=c(.3,.3,.03,.03), mgp=c(1,.1,0),
tck=-0.02, cex.axis=.8)
for(i in 3:ncol(results.graph)){
plot(results.graph[,1], results.graph[,i], type="l",ylab="N", xlab=names(results.graph)[i], lwd=3)
}
# png(paste0(result.folder,"/summary_graph_stats.png"), width=6, height=6, units="in", res=400)
par(mfrow=c(4,2), mai=c(.3,.3,.03,.03), mgp=c(1,.1,0),
tck=-0.02, cex.axis=.8)
for(i in 3:ncol(results.graph)){
plot(results.graph[,1], results.graph[,i], type="l",ylab="Time step", ylab=names(results.graph)[i], lwd=3)
}
# png(paste0(result.folder,"/summary_graph_stats.png"), width=6, height=6, units="in", res=400)
par(mfrow=c(4,2), mai=c(.3,.3,.03,.03), mgp=c(1,.1,0),
tck=-0.02, cex.axis=.8)
for(i in 3:ncol(results.graph)){
plot(results.graph[,1], results.graph[,i], type="l",xlab="Time step", ylab=names(results.graph)[i], lwd=3)
}
# png(paste0(result.folder,"/summary_graph_stats.png"), width=3.2, height=6, units="in", res=400)
par(mfrow=c(4,2), mai=c(.3,.3,.03,.03), mgp=c(1,.1,0),
tck=-0.02, cex.axis=.8)
for(i in 3:ncol(results.graph)){
plot(results.graph[,1], results.graph[,i], type="l",xlab="Time step", ylab=names(results.graph)[i], lwd=3)
}
# png(paste0(result.folder,"/summary_graph_stats.png"), width=3.2, height=6, units="in", res=400)
par(mfrow=c(3,3), mai=c(.3,.3,.03,.03), mgp=c(1,.1,0),
tck=-0.02, cex.axis=.8)
for(i in 2:ncol(results.graph)){
plot(results.graph[,1], results.graph[,i], type="l",xlab="Time step", ylab=names(results.graph)[i], lwd=3)
}
# add network matricies to results table
results.graph <- do.call(rbind, lapply(2:length(interactions), function(i){
tmp <- interactions[[i]]
g <- graph_from_adjacency_matrix(tmp, diag = FALSE, mode="undirected", weighted = TRUE)
return(data.frame(t=i-1, no_ids=length(V(g)),
edge_density=edge_density(g), #The proportion of present edges from all possible edges in the network.
diameter=diameter(g, directed=F, weights=NULL),   #  length of the longest geodesic (or longest distance)
mean_distance=mean_distance(g),            # mean length of geodesics
degree=mean(degree(g, normalized=TRUE)),
betweenness=mean(betweenness(g)),    #the mean number of geodesics (shortest paths) going through a vertex or an edge.
eigen_centrality=eigen_centrality(g, weights=E(g)$weight)$value,    # mean centrality proportional to the sum of connection centralities
authority=hub.score(g, weights=E(g)$weight)$value,   #hub or authority score
transitivity=transitivity(g, type="global", weights=E(g)$weight)))   #probability that the adjacent vertices of a vertex are connected. This is sometimes also called the clustering coefficient.
}))
# main plotting of graph results over time
# png(paste0(result.folder,"/summary_graph_stats.png"), width=5, height=5, units="in", res=400)
par(mfrow=c(3,3), mai=c(.3,.3,.03,.03), mgp=c(1,.1,0),
tck=-0.02, cex.axis=.8)
for(i in 2:ncol(results.graph)){
plot(results.graph[,1], results.graph[,i], type="l",xlab="Time step", ylab=names(results.graph)[i], lwd=3)
}
# add network matricies to results table
results.graph <- do.call(rbind, lapply(2:length(interactions), function(i){
tmp <- interactions[[i]]
g <- graph_from_adjacency_matrix(tmp, diag = FALSE, mode="undirected", weighted = TRUE)
return(data.frame(t=i-1, no_ids=length(V(g)),
edge_density=edge_density(g), #The proportion of present edges from all possible edges in the network.
diameter=diameter(g, directed=F, weights=NULL),   #  length of the longest geodesic (or longest distance)
mean_distance=mean_distance(g),            # mean length of geodesics
degree=mean(degree(g, normalized=TRUE)),
betweenness=mean(betweenness(g, normalized=TRUE)),    #the mean number of geodesics (shortest paths) going through a vertex or an edge.
eigen_centrality=eigen_centrality(g, weights=E(g)$weight, scale=TRUE)$value,    # mean centrality proportional to the sum of connection centralities
authority=hub.score(g, weights=E(g)$weight, scale=TRUE)$value,   #hub or authority score
transitivity=transitivity(g, type="global", weights=E(g)$weight)))   #probability that the adjacent vertices of a vertex are connected. This is sometimes also called the clustering coefficient.
}))
head(results.graph)
# main plotting of graph results over time
# png(paste0(result.folder,"/summary_graph_stats.png"), width=5, height=5, units="in", res=400)
par(mfrow=c(3,3), mai=c(.3,.3,.03,.03), mgp=c(1,.1,0),
tck=-0.02, cex.axis=.8)
for(i in 2:ncol(results.graph)){
plot(results.graph[,1], results.graph[,i], type="l",xlab="Time step", ylab=names(results.graph)[i], lwd=3)
}
# main plotting of graph results over time
png(paste0(result.folder,"/summary_graph_stats.png"), width=5, height=5, units="in", res=400)
par(mfrow=c(3,3), mai=c(.3,.3,.03,.03), mgp=c(1,.1,0),
tck=-0.02, cex.axis=.8)
for(i in 2:ncol(results.graph)){
plot(results.graph[,1], results.graph[,i], type="l",xlab="Time step", ylab=names(results.graph)[i], lwd=3)
}
dev.off()
info.transfer.IBM(h=0.10, #increase in probability of death for uninformed
nl=0.01, # naive learning probability of the oldest animals (i.e., the ones that have the highest naive learning)
si=5, # maximum mean (i.e., lambda of poison distribution) number of interactions per pair (if animal has 1 bold, it interacts with an animal with 1 boldness, and population is at or above K, this is the lambda of the interaction distributions)
infotransfer=0.6, # given an interaction, what is the probability that information is transfered (min=0, max=1)
K=100, # carrying capacity
N0=50, # starting number of individuals
t=25, # time of simulation
sex.ratio=0.5, #what is the sex ratio of of the population/births?
age.distr.lamba=5, # lambda value for starting age distribution based on poison distribution
informed.distr.beta=c(.5, 1), # probability of knowing information, beta distribution ranges from 0 to 1 (vector of 2 values: shape1 and shape2)
bold.distr.beta=c(2, 2), # probability of being bold, beta distribution (vector of 2 values: shape1 and shape2)
birthdeath.file="C:/Users/jmerkle/Documents/GitHub/Memory_IBM/ageClass_Test.csv", #dataframe of age based birth and death rate. The columns should be age, ageClass, birthRate, and survivalRate, in that order.
result.folder="C:/Users/jmerkle/Desktop/results", #an empty folder where results will be saved.
set_seed=FALSE, # want to make results reproducible? Then set as TRUE
save_at_each_iter=TRUE, #should all results be written to file at each time step?
vertTransmission=0) #0 if false, 1 if true, vertical transmission of info status
#source the function
source("C:/Users/jmerkle/Documents/GitHub/Memory_IBM/info.transfer.IBM.R")
